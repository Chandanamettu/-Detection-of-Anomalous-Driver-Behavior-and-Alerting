{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from tkinter import *\n",
    "import tkinter\n",
    "import numpy as np\n",
    "import imutils\n",
    "import dlib\n",
    "import cv2 as cv\n",
    "from PIL import Image\n",
    "from keras.preprocessing.image import ImageDataGenerator\n",
    "from keras.models import Sequential\n",
    "from keras.layers import Convolution2D, MaxPooling2D, ZeroPadding2D\n",
    "from keras.layers import Activation, Dropout, Flatten, Dense\n",
    "import os\n",
    "from keras.preprocessing import image\n",
    "from tkinter import filedialog\n",
    "from tkinter.filedialog import askopenfilename\n",
    "\n",
    "main = tkinter.Tk()\n",
    "main.title(\"Video-Based Abnormal Driving Behavior Detection\")\n",
    "main.geometry(\"800x500\")\n",
    "\n",
    "global awgrd_model\n",
    "global video\n",
    "\n",
    "\n",
    "def loadModel():\n",
    "    global awgrd_model\n",
    "    img_width, img_height = 150, 150\n",
    "    train_data_dir = 'dataset/imgs/train'\n",
    "    validation_data_dir = 'dataset/imgs/validation'\n",
    "    nb_train_samples = 22424\n",
    "    nb_validation_samples = 1254\n",
    "    nb_epoch = 10\n",
    "    if os.path.exists('AWGRD_model.h5'):\n",
    "        awgrd_model = Sequential()\n",
    "        awgrd_model.add(Convolution2D(32, 3, 3, input_shape=(150, 150, 3), activation='relu'))\n",
    "        awgrd_model.add(MaxPooling2D(pool_size=(2, 2)))\n",
    "        awgrd_model.add(Convolution2D(32, 3, 3, activation='relu'))\n",
    "        awgrd_model.add(MaxPooling2D(pool_size=(2, 2)))\n",
    "        awgrd_model.add(Flatten())\n",
    "        awgrd_model.add(Dense(output_dim=128, activation='relu'))\n",
    "        awgrd_model.add(Dense(output_dim=10, activation='softmax'))\n",
    "        awgrd_model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\n",
    "        awgrd_model.load_weights('AWGRD_model.h5')\n",
    "        print(awgrd_model.summary())\n",
    "        pathlabel.config(text=\"          AWGRD Model Generated Successfully\")\n",
    "    else:\n",
    "        awgrd_model = Sequential()\n",
    "        awgrd_model.add(Convolution2D(32, 3, 3, input_shape=(150, 150, 3), activation='relu'))\n",
    "        awgrd_model.add(MaxPooling2D(pool_size=(2, 2)))\n",
    "        awgrd_model.add(Convolution2D(32, 3, 3, activation='relu'))\n",
    "        awgrd_model.add(MaxPooling2D(pool_size=(2, 2)))\n",
    "        awgrd_model.add(Flatten())\n",
    "        awgrd_model.add(Dense(output_dim=128, activation='relu'))\n",
    "        awgrd_model.add(Dense(output_dim=10, activation='softmax'))\n",
    "        awgrd_model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\n",
    "        train_datagen = ImageDataGenerator(rescale=1.0 / 255, shear_range=0.2, zoom_range=0.2, horizontal_flip=True)\n",
    "        test_datagen = ImageDataGenerator(rescale=1.0 / 255)\n",
    "        train_generator = train_datagen.flow_from_directory(train_data_dir, target_size=(img_height, img_width),\n",
    "                                                            batch_size=32, class_mode='categorical')\n",
    "        validation_generator = train_datagen.flow_from_directory(validation_data_dir,\n",
    "                                                                 target_size=(img_height, img_width), batch_size=32,\n",
    "                                                                 class_mode='categorical')\n",
    "        awgrd_model.fit_generator(train_generator, samples_per_epoch=nb_train_samples, nb_epoch=nb_epoch,\n",
    "                                  validation_data=validation_generator, nb_val_samples=nb_validation_samples)\n",
    "        awgrd_model.save_weights('driver_state_detection_small_CNN.h5')\n",
    "        pathlabel.config(text=\"          AWGRD Model Generated Successfully\")\n",
    "\n",
    "\n",
    "def upload():\n",
    "    global video\n",
    "    filename = filedialog.askopenfilename(initialdir=\"Video\")\n",
    "    pathlabel.config(text=\"          Video loaded\")\n",
    "    video = cv.VideoCapture(filename)\n",
    "\n",
    "\n",
    "def startMonitoring():\n",
    "    while (True):\n",
    "        ret, frame = video.read()\n",
    "        print(ret)\n",
    "        if ret == True:\n",
    "            cv.imwrite(\"test.jpg\", frame)\n",
    "            imagetest = image.load_img(\"test.jpg\", target_size=(150, 150))\n",
    "            imagetest = image.img_to_array(imagetest)\n",
    "            imagetest = np.expand_dims(imagetest, axis=0)\n",
    "            predict = awgrd_model.predict_classes(imagetest)\n",
    "            print(predict)\n",
    "            msg = \"\";\n",
    "            if str(predict[0]) == '0':\n",
    "                msg = 'makeup'\n",
    "            if str(predict[0]) == '1':\n",
    "                msg = 'Using/Talking Phone'\n",
    "            if str(predict[0]) == '2':\n",
    "                msg = 'Talking On phone'\n",
    "            if str(predict[0]) == '3':\n",
    "                msg = 'Using/Talking Phone'\n",
    "            if str(predict[0]) == '4':\n",
    "                msg = 'Using/Talking Phone'\n",
    "            if str(predict[0]) == '5':\n",
    "                msg = 'Drinking/Radio Operating'\n",
    "            if str(predict[0]) == '6':\n",
    "                msg = 'Drinking/Radio Operating'\n",
    "            if str(predict[0]) == '7':\n",
    "                msg = 'Reaching Behind'\n",
    "            if str(predict[0]) == '8':\n",
    "                msg = 'Hair & Makeup'\n",
    "            if str(predict[0]) == '9':\n",
    "                msg = 'Talking To Passenger'\n",
    "            text_label = \"{}: {:4f}\".format(msg, 80)\n",
    "            cv.putText(frame, text_label, (20, 20), cv.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)\n",
    "            cv.imshow('Frame', frame)\n",
    "            if cv.waitKey(2500) & 0xFF == ord('q'):\n",
    "                break\n",
    "        else:\n",
    "            break\n",
    "    video.release()\n",
    "    cv.destroyAllWindows()\n",
    "\n",
    "\n",
    "def exit():\n",
    "    global main\n",
    "    main.destroy()\n",
    "\n",
    "\n",
    "font = ('times', 16, 'bold')\n",
    "title = Label(main, text='Video-Based Abnormal Driving Behavior Detection via Deep Learning Fusions', anchor=W,\n",
    "              justify=LEFT)\n",
    "title.config(bg='black', fg='white')\n",
    "title.config(font=font)\n",
    "title.config(height=3, width=120)\n",
    "title.place(x=0, y=5)\n",
    "\n",
    "font1 = ('times', 14, 'bold')\n",
    "loadButton = Button(main, text=\"Generate & Load AWGRD Model\", command=loadModel)\n",
    "loadButton.place(x=50, y=200)\n",
    "loadButton.config(font=font1)\n",
    "\n",
    "pathlabel = Label(main)\n",
    "pathlabel.config(bg='DarkOrange1', fg='white')\n",
    "pathlabel.config(font=font1)\n",
    "pathlabel.place(x=50, y=250)\n",
    "\n",
    "uploadButton = Button(main, text=\"Upload Video\", command=upload)\n",
    "uploadButton.place(x=50, y=300)\n",
    "uploadButton.config(font=font1)\n",
    "\n",
    "uploadButton = Button(main, text=\"Start Behaviour Monitoring\", command=startMonitoring)\n",
    "uploadButton.place(x=50, y=350)\n",
    "uploadButton.config(font=font1)\n",
    "\n",
    "exitButton = Button(main, text=\"Exit\", command=exit)\n",
    "exitButton.place(x=50, y=400)\n",
    "exitButton.config(font=font1)\n",
    "\n",
    "main.config(bg='chocolate1')\n",
    "main.mainloop()\n",
    "\n",
    "\n",
    "if '__name__'==\"__main__\":\n",
    "    sai.run()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
